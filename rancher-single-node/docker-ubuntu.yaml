---
- name: Install Docker
  hosts: localhost
  connection: local
  become: yes
  vars:
    ansible_user: "rancher"
    target_host: "192.168.0.200"

  tasks:
    - name: Install dependencies
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - lsb-release
        - git
        - wget

    - name: Download kubectl
      get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        dest: /usr/local/bin/kubectl
        mode: 'a+x'

    - name: Configure kubectl
      lineinfile:
        path: $HOME/.kube/config
        line: "{{ lookup('env','KUBECONFIG') }}"

    - name: Add kubectl completion
      shell: kubectl completion bash >> $HOME/.bashrc


    - name: Get RKE latest release URL
      uri:
        url: https://api.github.com/repos/rancher/rke/releases/latest
        return_content: yes
      register: rke_release

    - name: Extract RKE download URL
      set_fact:
        rke_download_url: "{{ rke_release.json.assets | selectattr('name', 'match', 'linux-amd64') | map(attribute='browser_download_url') | first }}"

    - name: Download RKE binary
      get_url:
        url: "{{ rke_download_url }}"
        dest: /usr/local/bin/rke
        mode: 'a+x'

    - name: Display RKE version
      command: rke --version

    - name: Download Helm 3 script
      get_url:
        url: https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        dest: /tmp/get_helm.sh
        mode: 'a+x'

    - name: Run Helm 3 installation script
      command: /tmp/get_helm.sh

    - name: Display Helm version
      command: helm version

    - name: Ensure required kernel modules are loaded
      loop:
        - br_netfilter
        - ip6_udp_tunnel
        - ip_set
        - ip_set_hash_ip
        - ip_set_hash_net
        - iptable_filter
        - iptable_nat
        - iptable_mangle
        - iptable_raw
        - nf_conntrack_netlink
        - nf_conntrack
        - nf_conntrack_ipv4
        - nf_defrag_ipv4
        - nf_nat
        - nf_nat_ipv4
        - nf_nat_masquerade_ipv4
        - nfnetlink
        - udp_tunnel
        - veth
        - vxlan
        - x_tables
        - xt_addrtype
        - xt_conntrack
        - xt_comment
        - xt_mark
        - xt_multiport
        - xt_nat
        - xt_recent
        - xt_set
        - xt_statistic
        - xt_tcpudp
      shell: "lsmod | grep -q {{ item }} || modprobe {{ item }}"

    - name: Comment out the swap entry in /etc/fstab
      lineinfile:
        path: /etc/fstab
        line: "# {{ ansible_swap_line }}"
      become: true
      become_user: root
      vars:
        ansible_swap_line: swap

    - name: Turn off swap
      command: swapoff -a

    - name: Configure kernel parameters for Kubernetes
      blockinfile:
        path: /etc/sysctl.d/99-kubernetes.conf
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1
      become: true
      become_user: root

    - name: Apply sysctl changes
      command: sysctl --system

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Install docker-compose
      remote_user: ubuntu
      get_url: 
        url : https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'
    
    - name: Enable UFW
      command: ufw enable

    - name: Allow specified TCP ports
      loop:
        - 22
        - 80
        - 443
        - 179
        - 5473
        - 6443
        - 8472
        - 2376
        - 8472
        - "2379:2380"
        - 9099
        - 10250
        - 10251
        - 10252
        - 10254
        - "30000:32767"
      command: "ufw allow {{ item }}/tcp"

    - name: Allow specified UDP ports
      loop:
        - 8285
        - 8472
        - 4789
        - "30000:32767"
      command: "ufw allow {{ item }}/udp"

    - name: Reload UFW
      command: ufw reload

    - name: Generate SSH key pair
      command: ssh-keygen -t rsa -b 2048 -f "{{ ansible_user_dir }}/.ssh/id_rsa" -N ""

    - name: Copy SSH public key to remote host
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', ansible_user_dir + '/.ssh/id_rsa.pub') }}"
        path: "{{ ansible_user_dir }}/.ssh/authorized_keys"

    - name: Set AllowTcpForwarding in sshd_config
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?AllowTcpForwarding'
        line: 'AllowTcpForwarding yes'
      notify: Restart SSH

  handlers:
    - name: Restart SSH
      service:
        name: ssh
        state: restarted